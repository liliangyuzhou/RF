<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="requests" type="library" format="ROBOT" generated="20190725 16:33:06">
<version>2.22.0</version>
<scope>global</scope>
<namedargs>yes</namedargs>
<doc>Requests HTTP Library
~~~~~~~~~~~~~~~~~~~~~

Requests is an HTTP library, written in Python, for human beings. Basic GET
usage:

   &gt;&gt;&gt; import requests
   &gt;&gt;&gt; r = requests.get('https://www.python.org')
   &gt;&gt;&gt; r.status_code
   200
   &gt;&gt;&gt; 'Python is a programming language' in r.content
   True

... or POST:

   &gt;&gt;&gt; payload = dict(key1='value1', key2='value2')
   &gt;&gt;&gt; r = requests.post('https://httpbin.org/post', data=payload)
   &gt;&gt;&gt; print(r.text)
   {
     ...
     "form": {
       "key2": "value2",
       "key1": "value1"
     },
     ...
   }

The other HTTP methods are supported - see `requests.api`. Full documentation
is at &lt;http://python-requests.org&gt;.

:copyright: (c) 2017 by Kenneth Reitz.
:license: Apache 2.0, see LICENSE for more details.</doc>
<kw name="Check Compatibility">
<arguments>
<arg>urllib3_version</arg>
<arg>chardet_version</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Delete">
<arguments>
<arg>url</arg>
<arg>**kwargs</arg>
</arguments>
<doc>Sends a DELETE request.

:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response &lt;Response&gt;` object
:rtype: requests.Response</doc>
<tags>
</tags>
</kw>
<kw name="Get">
<arguments>
<arg>url</arg>
<arg>params=None</arg>
<arg>**kwargs</arg>
</arguments>
<doc>Sends a GET request.

:param url: URL for the new :class:`Request` object.
:param params: (optional) Dictionary, list of tuples or bytes to send
    in the query string for the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response &lt;Response&gt;` object
:rtype: requests.Response</doc>
<tags>
</tags>
</kw>
<kw name="Head">
<arguments>
<arg>url</arg>
<arg>**kwargs</arg>
</arguments>
<doc>Sends a HEAD request.

:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response &lt;Response&gt;` object
:rtype: requests.Response</doc>
<tags>
</tags>
</kw>
<kw name="Options">
<arguments>
<arg>url</arg>
<arg>**kwargs</arg>
</arguments>
<doc>Sends an OPTIONS request.

:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response &lt;Response&gt;` object
:rtype: requests.Response</doc>
<tags>
</tags>
</kw>
<kw name="Patch">
<arguments>
<arg>url</arg>
<arg>data=None</arg>
<arg>**kwargs</arg>
</arguments>
<doc>Sends a PATCH request.

:param url: URL for the new :class:`Request` object.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like
    object to send in the body of the :class:`Request`.
:param json: (optional) json data to send in the body of the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response &lt;Response&gt;` object
:rtype: requests.Response</doc>
<tags>
</tags>
</kw>
<kw name="Post">
<arguments>
<arg>url</arg>
<arg>data=None</arg>
<arg>json=None</arg>
<arg>**kwargs</arg>
</arguments>
<doc>Sends a POST request.

:param url: URL for the new :class:`Request` object.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like
    object to send in the body of the :class:`Request`.
:param json: (optional) json data to send in the body of the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response &lt;Response&gt;` object
:rtype: requests.Response</doc>
<tags>
</tags>
</kw>
<kw name="Put">
<arguments>
<arg>url</arg>
<arg>data=None</arg>
<arg>**kwargs</arg>
</arguments>
<doc>Sends a PUT request.

:param url: URL for the new :class:`Request` object.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like
    object to send in the body of the :class:`Request`.
:param json: (optional) json data to send in the body of the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response &lt;Response&gt;` object
:rtype: requests.Response</doc>
<tags>
</tags>
</kw>
<kw name="Request">
<arguments>
<arg>method</arg>
<arg>url</arg>
<arg>**kwargs</arg>
</arguments>
<doc>Constructs and sends a :class:`Request &lt;Request&gt;`.

:param method: method for the new :class:`Request` object.
:param url: URL for the new :class:`Request` object.
:param params: (optional) Dictionary, list of tuples or bytes to send
    in the query string for the :class:`Request`.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like
    object to send in the body of the :class:`Request`.
:param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.
:param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.
:param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.
:param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.
    ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``
    or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content-type'`` is a string
    defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers
    to add for the file.
:param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.
:param timeout: (optional) How many seconds to wait for the server to send data
    before giving up, as a float, or a :ref:`(connect timeout, read
    timeout) &lt;timeouts&gt;` tuple.
:type timeout: float or tuple
:param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.
:type allow_redirects: bool
:param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.
:param verify: (optional) Either a boolean, in which case it controls whether we verify
        the server's TLS certificate, or a string, in which case it must be a path
        to a CA bundle to use. Defaults to ``True``.
:param stream: (optional) if ``False``, the response content will be immediately downloaded.
:param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.
:return: :class:`Response &lt;Response&gt;` object
:rtype: requests.Response

Usage::

  &gt;&gt;&gt; import requests
  &gt;&gt;&gt; req = requests.request('GET', 'https://httpbin.org/get')
  &lt;Response [200]&gt;</doc>
<tags>
</tags>
</kw>
<kw name="Session">
<arguments>
</arguments>
<doc>Returns a :class:`Session` for context-management.

.. deprecated:: 1.0.0

    This method has been deprecated since version 1.0.0 and is only kept for
    backwards compatibility. New code should use :class:`~requests.sessions.Session`
    to create a session. This may be removed at a future date.

:rtype: Session</doc>
<tags>
</tags>
</kw>
</keywordspec>
