<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="RequestsLibrary" type="library" format="ROBOT" generated="20190730 16:16:23">
<version></version>
<scope>global</scope>
<namedargs>yes</namedargs>
<doc>RequestsLibrary is a HTTP client keyword library that uses
the requests module from Kenneth Reitz
https://github.com/kennethreitz/requests


    Examples:
    | Create Session | google | http://www.google.com |
    | Create Session | github  | http://github.com/api/v2/json |
    | ${resp} | Get  google  |  / |
    | Should Be Equal As Strings |  ${resp.status_code} | 200 |
    | ${resp} | Get  github  | /user/search/bulkan |
    | Should Be Equal As Strings  |  ${resp.status_code} | 200 |
    | ${jsondata}  | To Json |  ${resp.content} |
    | Dictionary Should Contain Value | ${jsondata['users'][0]} | Bulkan Savun Evcimen |</doc>
<kw name="Create Client Cert Session">
<arguments>
<arg>alias</arg>
<arg>url</arg>
<arg>headers={}</arg>
<arg>cookies=None</arg>
<arg>client_certs=None</arg>
<arg>timeout=None</arg>
<arg>proxies=None</arg>
<arg>verify=False</arg>
<arg>debug=0</arg>
<arg>max_retries=3</arg>
<arg>backoff_factor=0.1</arg>
<arg>disable_warnings=0</arg>
</arguments>
<doc>Create Session: create a HTTP session to a server

``url`` Base url of the server

``alias`` Robot Framework alias to identify the session

``headers`` Dictionary of default headers

``client_certs`` ['client certificate', 'client key'] PEM files containing the client key and certificate

``timeout`` Connection timeout

``proxies`` Dictionary that contains proxy urls for HTTP and HTTPS communication

``verify`` Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided.
         Defaults to False.

``debug`` Enable http verbosity option more information
        https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel

``max_retries`` The maximum number of retries each connection should attempt.

``backoff_factor`` The pause between for each retry

``disable_warnings`` Disable requests warning useful when you have large number of testcases</doc>
<tags>
</tags>
</kw>
<kw name="Create Custom Session">
<arguments>
<arg>alias</arg>
<arg>url</arg>
<arg>auth</arg>
<arg>headers={}</arg>
<arg>cookies=None</arg>
<arg>timeout=None</arg>
<arg>proxies=None</arg>
<arg>verify=False</arg>
<arg>debug=0</arg>
<arg>max_retries=3</arg>
<arg>backoff_factor=0.1</arg>
<arg>disable_warnings=0</arg>
</arguments>
<doc>Create Session: create a HTTP session to a server

``url`` Base url of the server

``alias`` Robot Framework alias to identify the session

``headers`` Dictionary of default headers

``auth`` A Custom Authentication object to be passed on to the reqests library.
        http://docs.python-requests.org/en/master/user/advanced/#custom-authentication

``timeout`` Connection timeout

``proxies`` Dictionary that contains proxy urls for HTTP and HTTPS communication

``verify`` Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided.
         Defaults to False.

``debug`` Enable http verbosity option more information
        https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel

``max_retries`` The maximum number of retries each connection should attempt.

``backoff_factor`` The pause between for each retry

``disable_warnings`` Disable requests warning useful when you have large number of testcases</doc>
<tags>
</tags>
</kw>
<kw name="Create Digest Session">
<arguments>
<arg>alias</arg>
<arg>url</arg>
<arg>auth</arg>
<arg>headers={}</arg>
<arg>cookies=None</arg>
<arg>timeout=None</arg>
<arg>proxies=None</arg>
<arg>verify=False</arg>
<arg>debug=0</arg>
<arg>max_retries=3</arg>
<arg>backoff_factor=0.1</arg>
<arg>disable_warnings=0</arg>
</arguments>
<doc>Create Session: create a HTTP session to a server

``url`` Base url of the server

``alias`` Robot Framework alias to identify the session

``headers`` Dictionary of default headers

``auth`` ['DOMAIN', 'username', 'password'] for NTLM Authentication

``timeout`` Connection timeout

``proxies`` Dictionary that contains proxy urls for HTTP and HTTPS communication

``verify`` Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided.
         Defaults to False.

``debug`` Enable http verbosity option more information
        https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel

``max_retries`` The maximum number of retries each connection should attempt.

``backoff_factor`` The pause between for each retry

``disable_warnings`` Disable requests warning useful when you have large number of testcases</doc>
<tags>
</tags>
</kw>
<kw name="Create Ntlm Session">
<arguments>
<arg>alias</arg>
<arg>url</arg>
<arg>auth</arg>
<arg>headers={}</arg>
<arg>cookies=None</arg>
<arg>timeout=None</arg>
<arg>proxies=None</arg>
<arg>verify=False</arg>
<arg>debug=0</arg>
<arg>max_retries=3</arg>
<arg>backoff_factor=0.1</arg>
<arg>disable_warnings=0</arg>
</arguments>
<doc>Create Session: create a HTTP session to a server

``url`` Base url of the server

``alias`` Robot Framework alias to identify the session

``headers`` Dictionary of default headers

``auth`` ['DOMAIN', 'username', 'password'] for NTLM Authentication

``timeout`` Connection timeout

``proxies`` Dictionary that contains proxy urls for HTTP and HTTPS communication

``verify`` Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided.
         Defaults to False.

``debug`` Enable http verbosity option more information
        https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel

``max_retries`` The maximum number of retries each connection should attempt.

``backoff_factor`` The pause between for each retry

``disable_warnings`` Disable requests warning useful when you have large number of testcases</doc>
<tags>
</tags>
</kw>
<kw name="Create Session">
<arguments>
<arg>alias</arg>
<arg>url</arg>
<arg>headers={}</arg>
<arg>cookies=None</arg>
<arg>auth=None</arg>
<arg>timeout=None</arg>
<arg>proxies=None</arg>
<arg>verify=False</arg>
<arg>debug=0</arg>
<arg>max_retries=3</arg>
<arg>backoff_factor=0.1</arg>
<arg>disable_warnings=0</arg>
</arguments>
<doc>Create Session: create a HTTP session to a server

``url`` Base url of the server

``alias`` Robot Framework alias to identify the session

``headers`` Dictionary of default headers

``auth`` List of username &amp; password for HTTP Basic Auth

``timeout`` Connection timeout

``proxies`` Dictionary that contains proxy urls for HTTP and HTTPS communication

``verify`` Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided.
         Defaults to False.

``debug`` Enable http verbosity option more information
        https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel

``max_retries`` The maximum number of retries each connection should attempt.

``backoff_factor`` The pause between for each retry

``disable_warnings`` Disable requests warning useful when you have large number of testcases</doc>
<tags>
</tags>
</kw>
<kw name="Delete">
<arguments>
<arg>alias</arg>
<arg>uri</arg>
<arg>data=()</arg>
<arg>headers=None</arg>
<arg>allow_redirects=None</arg>
<arg>timeout=None</arg>
</arguments>
<doc>* * *   Deprecated- See Delete Request now   * * *

Send a DELETE request on the session object found using the
given `alias`

``alias`` that will be used to identify the Session object in the cache

``uri`` to send the DELETE request to

``headers`` a dictionary of headers to use with the request

``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.

``timeout`` connection timeout</doc>
<tags>
</tags>
</kw>
<kw name="Delete All Sessions">
<arguments>
</arguments>
<doc>Removes all the session objects</doc>
<tags>
</tags>
</kw>
<kw name="Delete Request">
<arguments>
<arg>alias</arg>
<arg>uri</arg>
<arg>data=None</arg>
<arg>json=None</arg>
<arg>params=None</arg>
<arg>headers=None</arg>
<arg>allow_redirects=None</arg>
<arg>timeout=None</arg>
</arguments>
<doc>Send a DELETE request on the session object found using the
given `alias`

``alias`` that will be used to identify the Session object in the cache

``uri`` to send the DELETE request to

``json`` a value that will be json encoded
       and sent as request data if data is not specified

``headers`` a dictionary of headers to use with the request

``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.

``timeout`` connection timeout</doc>
<tags>
</tags>
</kw>
<kw name="Get">
<arguments>
<arg>alias</arg>
<arg>uri</arg>
<arg>params=None</arg>
<arg>headers=None</arg>
<arg>allow_redirects=None</arg>
<arg>timeout=None</arg>
</arguments>
<doc>**Deprecated- See Get Request now**

Send a GET request on the session object found using the
given `alias`

``alias`` that will be used to identify the Session object in the cache

``uri`` to send the GET request to

``headers`` a dictionary of headers to use with the request

``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.

``timeout`` connection timeout</doc>
<tags>
</tags>
</kw>
<kw name="Get Request">
<arguments>
<arg>alias</arg>
<arg>uri</arg>
<arg>headers=None</arg>
<arg>json=None</arg>
<arg>params=None</arg>
<arg>allow_redirects=None</arg>
<arg>timeout=None</arg>
</arguments>
<doc>Send a GET request on the session object found using the
given `alias`

``alias`` that will be used to identify the Session object in the cache

``uri`` to send the GET request to

``params`` url parameters to append to the uri

``headers`` a dictionary of headers to use with the request

``json`` json data to send in the body of the :class:`Request`.

``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.

``timeout`` connection timeout</doc>
<tags>
</tags>
</kw>
<kw name="Head">
<arguments>
<arg>alias</arg>
<arg>uri</arg>
<arg>headers=None</arg>
<arg>allow_redirects=None</arg>
<arg>timeout=None</arg>
</arguments>
<doc>**Deprecated- See Head Request now**

Send a HEAD request on the session object found using the
given `alias`

``alias`` that will be used to identify the Session object in the cache

``uri`` to send the HEAD request to

``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.

``headers`` a dictionary of headers to use with the request</doc>
<tags>
</tags>
</kw>
<kw name="Head Request">
<arguments>
<arg>alias</arg>
<arg>uri</arg>
<arg>headers=None</arg>
<arg>allow_redirects=None</arg>
<arg>timeout=None</arg>
</arguments>
<doc>Send a HEAD request on the session object found using the
given `alias`

``alias`` that will be used to identify the Session object in the cache

``uri`` to send the HEAD request to

``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.

``headers`` a dictionary of headers to use with the request</doc>
<tags>
</tags>
</kw>
<kw name="Options">
<arguments>
<arg>alias</arg>
<arg>uri</arg>
<arg>headers=None</arg>
<arg>allow_redirects=None</arg>
<arg>timeout=None</arg>
</arguments>
<doc>**Deprecated- See Options Request now**

Send an OPTIONS request on the session object found using the
given `alias`

``alias`` that will be used to identify the Session object in the cache

``uri`` to send the OPTIONS request to

``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.

``headers`` a dictionary of headers to use with the request</doc>
<tags>
</tags>
</kw>
<kw name="Options Request">
<arguments>
<arg>alias</arg>
<arg>uri</arg>
<arg>headers=None</arg>
<arg>allow_redirects=None</arg>
<arg>timeout=None</arg>
</arguments>
<doc>Send an OPTIONS request on the session object found using the
given `alias`

``alias`` that will be used to identify the Session object in the cache

``uri`` to send the OPTIONS request to

``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.

``headers`` a dictionary of headers to use with the request</doc>
<tags>
</tags>
</kw>
<kw name="Patch">
<arguments>
<arg>alias</arg>
<arg>uri</arg>
<arg>data={}</arg>
<arg>headers=None</arg>
<arg>files={}</arg>
<arg>allow_redirects=None</arg>
<arg>timeout=None</arg>
</arguments>
<doc>**Deprecated- See Patch Request now**

Send a PATCH request on the session object found using the
given `alias`

``alias`` that will be used to identify the Session object in the cache

``uri`` to send the PATCH request to

``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as PATCH data
       or binary data that is sent as the raw body content

``headers`` a dictionary of headers to use with the request

``files`` a dictionary of file names containing file data to PATCH to the server

``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.

``timeout`` connection timeout</doc>
<tags>
</tags>
</kw>
<kw name="Patch Request">
<arguments>
<arg>alias</arg>
<arg>uri</arg>
<arg>data=None</arg>
<arg>json=None</arg>
<arg>params=None</arg>
<arg>headers=None</arg>
<arg>files=None</arg>
<arg>allow_redirects=None</arg>
<arg>timeout=None</arg>
</arguments>
<doc>Send a PATCH request on the session object found using the
given `alias`

``alias`` that will be used to identify the Session object in the cache

``uri`` to send the PATCH request to

``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as PATCH data
       or binary data that is sent as the raw body content

``json`` a value that will be json encoded
       and sent as PATCH data if data is not specified

``headers`` a dictionary of headers to use with the request

``files`` a dictionary of file names containing file data to PATCH to the server

``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.

``params`` url parameters to append to the uri

``timeout`` connection timeout</doc>
<tags>
</tags>
</kw>
<kw name="Post">
<arguments>
<arg>alias</arg>
<arg>uri</arg>
<arg>data={}</arg>
<arg>headers=None</arg>
<arg>files=None</arg>
<arg>allow_redirects=None</arg>
<arg>timeout=None</arg>
</arguments>
<doc>**Deprecated- See Post Request now**

Send a POST request on the session object found using the
given `alias`

``alias`` that will be used to identify the Session object in the cache

``uri`` to send the GET request to

``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content

``headers`` a dictionary of headers to use with the request

``files`` a dictionary of file names containing file data to POST to the server

``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.

``timeout`` connection timeout</doc>
<tags>
</tags>
</kw>
<kw name="Post Request">
<arguments>
<arg>alias</arg>
<arg>uri</arg>
<arg>data=None</arg>
<arg>json=None</arg>
<arg>params=None</arg>
<arg>headers=None</arg>
<arg>files=None</arg>
<arg>allow_redirects=None</arg>
<arg>timeout=None</arg>
</arguments>
<doc>Send a POST request on the session object found using the
given `alias`

``alias`` that will be used to identify the Session object in the cache

``uri`` to send the POST request to

``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as POST data
       or binary data that is sent as the raw body content
       or passed as such for multipart form data if ``files`` is also
          defined

``json`` a value that will be json encoded
       and sent as POST data if files or data is not specified

``params`` url parameters to append to the uri

``headers`` a dictionary of headers to use with the request

``files`` a dictionary of file names containing file data to POST to the server

``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.

``timeout`` connection timeout</doc>
<tags>
</tags>
</kw>
<kw name="Put">
<arguments>
<arg>alias</arg>
<arg>uri</arg>
<arg>data=None</arg>
<arg>headers=None</arg>
<arg>allow_redirects=None</arg>
<arg>timeout=None</arg>
</arguments>
<doc>**Deprecated- See Put Request now**

Send a PUT request on the session object found using the
given `alias`

``alias`` that will be used to identify the Session object in the cache

``uri`` to send the PUT request to

``headers`` a dictionary of headers to use with the request

``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.

``timeout`` connection timeout</doc>
<tags>
</tags>
</kw>
<kw name="Put Request">
<arguments>
<arg>alias</arg>
<arg>uri</arg>
<arg>data=None</arg>
<arg>json=None</arg>
<arg>params=None</arg>
<arg>files=None</arg>
<arg>headers=None</arg>
<arg>allow_redirects=None</arg>
<arg>timeout=None</arg>
</arguments>
<doc>Send a PUT request on the session object found using the
given `alias`

``alias`` that will be used to identify the Session object in the cache

``uri`` to send the PUT request to

``data`` a dictionary of key-value pairs that will be urlencoded
       and sent as PUT data
       or binary data that is sent as the raw body content

``json`` a value that will be json encoded
       and sent as PUT data if data is not specified

``headers`` a dictionary of headers to use with the request

``allow_redirects`` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.

``params`` url parameters to append to the uri

``timeout`` connection timeout</doc>
<tags>
</tags>
</kw>
<kw name="To Json">
<arguments>
<arg>content</arg>
<arg>pretty_print=False</arg>
</arguments>
<doc>Convert a string to a JSON object

``content`` String content to convert into JSON

``pretty_print`` If defined, will output JSON is pretty print format</doc>
<tags>
</tags>
</kw>
<kw name="Update Session">
<arguments>
<arg>alias</arg>
<arg>headers=None</arg>
<arg>cookies=None</arg>
</arguments>
<doc>Update Session Headers: update a HTTP Session Headers

``alias`` Robot Framework alias to identify the session

``headers`` Dictionary of headers merge into session</doc>
<tags>
</tags>
</kw>
</keywordspec>
